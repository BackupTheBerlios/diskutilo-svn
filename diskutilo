#!/usr/bin/perl -w
#Diskutilo

use strict;
use warnings;

use Gtk2 '-init'; # auto-initialize Gtk2
use Gtk2::GladeXML;
use Gtk2::SimpleList;   # easy wrapper for list views
use Gtk2::Gdk::Keysyms; # keyboard code constants
#use Gtk2::TrayIcon;
use XML::Simple qw(:strict);
use Data::Dumper;
use jabber;

#use open ":utf8";

my $glade;
my $main_win;
my $main_state;
my $main_contacts;

my $config_win;
my $config_accounts_account;
my $config_accounts_username;
my $config_accounts_hostname;
my $config_accounts_port;
my $config_accounts_resource;
my $config_accounts_password;
my $config_accounts_state;

my $config_page=0;

my $add_win;
my $add_nb;
my $add_account_username;
my $add_account_hostname;
my $add_account_port;
my $add_account_resource;
my $add_account_password;
my $add_account_state;
my $add_account_auto_reconnect;

my $add_contact_jid;
my $add_contact_name;
my $add_contact_group;

my $jabber;

my %chat_wins = ();

$glade = Gtk2::GladeXML->new("diskutilo.glade");
$glade->signal_autoconnect_from_package('main');
init_gui();
my $config_file_name = "config";
my $config;
if (-e $config_file_name)
{
    $config = XMLin($config_file_name, ForceArray => 1, KeyAttr => "key");
}

if(defined($config->{accounts}))
{
    foreach (keys(%{$config->{accounts}}))
    {
	add_account($config->{accounts}->{$_});
    }
}
$main_state->set_active(0);
Gtk2->main;
exit 0;

sub init_gui {
    $main_win = $glade->get_widget('main');
    $config_win = $glade->get_widget('config');
    $add_win  = $glade->get_widget('add');
    $add_nb  = $glade->get_widget('add_nb');

    $add_contact_jid = $glade->get_widget('add_contact_jid');
    $add_contact_name = $glade->get_widget('add_contact_name');
    $add_contact_group = $glade->get_widget('add_contact_group');

    $add_account_username = $glade->get_widget('add_account_username');
    $add_account_hostname = $glade->get_widget('add_account_hostname');
    $add_account_port = $glade->get_widget('add_account_port');
    $add_account_resource = $glade->get_widget('add_account_resource');
    $add_account_password = $glade->get_widget('add_account_password');
    $add_account_state    = $glade->get_widget('add_account_state');
    $add_account_auto_reconnect = $glade->get_widget('add_account_auto_reconnect');

    $config_accounts_account = $glade->get_widget('config_accounts_account');
    $config_accounts_username = $glade->get_widget('config_accounts_username');
    $config_accounts_hostname = $glade->get_widget('config_accounts_hostname');
    $config_accounts_port = $glade->get_widget('config_accounts_port');
    $config_accounts_resource = $glade->get_widget('config_accounts_resource');
    $config_accounts_password = $glade->get_widget('config_accounts_password');

    $main_state = $glade->get_widget('main_state');

    my $TV = $glade->get_widget('main_contacts');
    $main_contacts = Gtk2::TreeStore->new ('Glib::String', 'Glib::String', 'Glib::String');
    $TV->set_model ($main_contacts);
    $TV->set_rules_hint (0);
    $TV->set_search_column (0);

    my $renderer = Gtk2::CellRendererText->new;
    $renderer->set("editable", 1);
    $renderer->signal_connect (edited => \&cell_edited);
    my $column = Gtk2::TreeViewColumn->new_with_attributes ("JID", $renderer, text => 1);
    $column->set_sort_column_id (0);
    $TV->append_column ($column);

    $renderer = Gtk2::CellRendererText->new;
    $column = Gtk2::TreeViewColumn->new_with_attributes ("Pres", $renderer, text => 2);
    $column->set_sort_column_id (0);
    $TV->append_column ($column);

    $TV->show_all;

#    my $icon= Gtk2::TrayIcon->new("test");
#    my $label= Gtk2::Label->new("test");
#    $icon->add($label);
#    $icon->show_all;
}
    
sub add_account {
    my ($account) = @_;
    my $jid = $account->{username} . "\@" . $account->{hostname};
    print "Account: $jid\n";
    $jabber->{$jid} = jabber->new($account, \&on_chat, \&on_presence);
    my $account_iter = $main_contacts->append(undef);
    $main_contacts->set ($account_iter, 0, $jid, 1, $jid);
}

sub GUI_main_get_account {
    my ($ajid) = @_;
    my $model = $main_contacts;
    my $account = $model->get_iter_first;

    while(defined($account))
    {
	return $model->get_string_from_iter($account) if($model->get ($account, 0) eq $ajid);
	$account = $model->iter_next($account);
    }
    return undef;
}

sub GUI_main_get_contact {
    my ($ajid, $jid) = @_;
    my $model = $main_contacts;
    my $account = $model->get_iter_first;
    my @list;

    while(defined($account))
    {
#	print "Account STRING PATH: " . $model->get_string_from_iter($account) . "\n";
	my $contact = $model->iter_children($account);

	if($model->get ($account, 0) eq $ajid)
	{
	    while(defined($contact))
	    {
		if($model->get ($contact, 0) eq $jid)
		{
		    return $model->get_string_from_iter($contact);
		    #push @list, $model->get_string_from_iter($contact);
		}
		$contact = $model->iter_next($contact);
	    }
	}
	$account = $model->iter_next($account);
    }
#    print Dumper(@list);
#    return @list;
    return undef;
}

sub GUI_main_contact_update {
    my ($ajid, $jid, $name, $state) = @_;
    my $iter;

    my $path = GUI_main_get_contact($ajid, $jid);
    if(defined($path)) {
	$iter = $main_contacts->get_iter_from_string ($path);
    } else {
	my $account_iter = $main_contacts->get_iter_from_string (GUI_main_get_account($ajid));
	$iter = $main_contacts->append($account_iter);
    }
    $main_contacts->set ($iter, 0, $jid, 1, $name, 2, $state);
}

sub GUI_main_contact_remove {
    my ($ajid, $jid) = @_;

    my $path = GUI_main_get_contact($ajid, $jid);
    if(defined($path)) {
	my $iter = $main_contacts->get_iter_from_string ($path);
	$main_contacts->remove ($iter);
    }
}

sub diskutilo_connect {
#FIXME: Account
#    my $jabber->{$jid} = %diskutilo->{jabber}

    foreach (keys(%{$jabber}))
    {
	return -1 if(!defined($jabber->{$_}));
	$jabber->{$_}->Connect() ne -1 or return -1;
	sleep 1;
#	my $account_iter = $main_contacts->get_iter_from_string (GUI_main_get_account($_));
#	foreach my $c (keys %{$jabber->{$_}->{roster}})
#	{
#	    $roster->{$c}->{jabber} = \$jabber->{$_}->{roster}->{$c};
#	    my $name = $jabber->{$_}->{roster}->{$c}->{name};
#	    $name = $c if($name eq "");
#	    my $iter = $main_contacts->append($account_iter);
#	    $main_contacts->get_path ($iter);
#	    $main_contacts->set ($iter, 0, $c, 1, $name);
#	    print Dumper($jabber->{$_}->{roster}->{$c});
#	}
    }

    return 0;
}

sub diskutilo_disconnect {
#FIXME: Account
#    my $jabber->{$jid} = %diskutilo->{jabber}

    foreach (keys(%{$jabber}))
    {
	return 0 if(!defined($jabber->{$_}));
	Glib::Source->remove($jabber->{$_}->{process_ID}) if(defined($jabber->{$_}->{process_ID}));
	my $account_iter = $main_contacts->get_iter_from_string (GUI_main_get_account($_));
	my $iter = $main_contacts->iter_children ($account_iter);
	while(defined($iter))
	{
	    my $remove = $iter;
	    $iter = $main_contacts->iter_next ($iter);
	    $main_contacts->remove ($remove);
	}
	$jabber->{$_}->Disconnect();
    }
    return 0;
}

sub on_main_state_changed {
    my ($state) = @_;

    my $s = $state->get_active;

    if($s==0) { # State Online
	diskutilo_connect() == 0 or $state->set_active(1);
    } elsif($s == 1) { # State disconnected
	diskutilo_disconnect();
    }
}

sub on_main_config_button_clicked {
    $config_accounts_account->remove_text(0) while $config_accounts_account->get_model()->iter_n_children() != 0;

    if(defined($config->{accounts}))
    {
	foreach ($config->{accounts})
	{
	    my $jid = $_->{username} . "\@" . $_->{hostname};
	    $config_accounts_account->append_text($jid);
	}
	$config_accounts_account->set_active(0);
    }

    $config_win->show;
#    $config_win->on_top;
}

sub config_update_account {
    print "config accounts\n";
    my @account_list = keys(%{$config->{accounts}});
    my $account = $account_list[$config_accounts_account->get_activ()];
    print "account: $account\n";
    my $username = $config_accounts_username->get_text();
    my $hostname = $config_accounts_hostname->get_text();
    my $port     = $config_accounts_port->get_text();
    my $resource = $config_accounts_resource->get_text();
    my $password = $config_accounts_password->get_text();
#	my $state    = $config_accounts_state->get_active();
#	my $auto_reconnect = $config_accounts_auto_reconnect->get_active();

    return fill_it($config_accounts_username, "username") if($username eq "");
    return fill_it($config_accounts_hostname, "hostname") if($hostname eq "");
    $port = 5222 if($port eq "");
    $resource = "Diskutilo" if($resource eq "");

    my $jid = $username . "\@" . $hostname;

    $config->{accounts}=() if(!defined($config->{accounts}));
    $config->{accounts}->{$jid}=();
    $config->{accounts}->{$jid}->{username} = $username;
    $config->{accounts}->{$jid}->{hostname} = $hostname;
    $config->{accounts}->{$jid}->{port} = $port;
    $config->{accounts}->{$jid}->{resource} = $resource;
    $config->{accounts}->{$jid}->{password} = $password;
#	$config->{accounts}->{$jid}->{state}    = $state;
#	$config->{accounts}->{$jid}->{auto_reconnect} = $auto_reconnect;

    config_accounts($config->{accounts}->{$jid});

    XMLout($config, KeyAttr => "key", OutputFile => $config_file_name);
}

sub config_update {
    if($config_page == 1)
    {
	config_update_account;
    }
    elsif($config_page == 2)
    {
	my $account = "";#$add_contact_account->get_text();
	my $jid =     $add_contact_jid->get_text();
	my $name =    $add_contact_name->get_text();
	print "add contact: jid: $jid, name: $name\n";
	$jabber->{$account}->add_contact($jid, $name);
    }
    elsif($config_page == 3)
    {
	print "add transport\n";
    }
    $add_win->hide;
}

sub on_config_accounts_account_changed {
    my $model = $config_accounts_account->get_model;
    my $iter = $config_accounts_account->get_active_iter;
    my ($jid) = $model->get_value($iter);

    print "jid: $jid\n";

    $config_accounts_username->set_text($config->{accounts}->{$jid}->{username});
    $config_accounts_hostname->set_text($config->{accounts}->{$jid}->{hostname});
    $config_accounts_port->set_text($config->{accounts}->{$jid}->{port});
    $config_accounts_resource->set_text($config->{accounts}->{$jid}->{resource});
    $config_accounts_password->set_text($config->{accounts}->{$jid}->{password});
}

sub on_main_add_button_clicked {
    $add_win->show;
#    $config_win->on_top;
}

sub on_main_delete_event {
    Gtk2->main_quit;
}

sub on_add_delete_event {
    my $w = shift;
    $w->hide;
    1;#consume this event!
}

sub fill_it {
    my ($widget, $field_name) = @_;
    my $dialog = Gtk2::Dialog->new ('Message', $main_win, 'destroy-with-parent', 'gtk-ok' => 'none');
    my $label = Gtk2::Label->new ("You have to specify a " . $field_name);
    $dialog->vbox->add ($label);
    $dialog->signal_connect (response => sub { $_[0]->destroy });
    $dialog->show_all;
    $widget->grab_focus;
    return 1;
}

sub GUI_add_account {
    print "add account\n";

    my $username = $add_account_username->get_text();
    my $hostname = $add_account_hostname->get_text();
    my $port     = $add_account_port->get_text();
    my $resource = $add_account_resource->get_text();
    my $password = $add_account_password->get_text();
#	my $state    = $add_account_state->get_active();
#	my $auto_reconnect = $add_account_auto_reconnect->get_active();

    return fill_it($add_account_username, "username") if($username eq "");
    return fill_it($add_account_hostname, "hostname") if($hostname eq "");
    $port = 5222 if($port eq "");
    $resource = "Diskutilo" if($resource eq "");

    my $jid = $username . "\@" . $hostname;

    $config->{accounts}=() if(!defined($config->{accounts}));
    $config->{accounts}->{$jid}=();
    $config->{accounts}->{$jid}->{username} = $username;
    $config->{accounts}->{$jid}->{hostname} = $hostname;
    $config->{accounts}->{$jid}->{port} = $port;
    $config->{accounts}->{$jid}->{resource} = $resource;
    $config->{accounts}->{$jid}->{password} = $password;
#	$config->{accounts}->{$jid}->{state}    = $state;
#	$config->{accounts}->{$jid}->{auto_reconnect} = $auto_reconnect;

    add_account($config->{accounts}->{$jid});

    XMLout($config, KeyAttr => "key", OutputFile => $config_file_name);
}

sub GUI_add_contact {
    my $account = "";#$add_contact_account->get_text();
    my $jid =     $add_contact_jid->get_text();
    my $name =    $add_contact_name->get_text();
    print "add contact: jid: $jid, name: $name\n";
    $jabber->{$account}->add_contact($jid, $name);
}

sub on_add_button_clicked {
#FIXME: Account
#    my $jabber->{$jid} = %diskutilo->{jabber}
    if($config_page == 0)
    {
	GUI_add_account;
    }
    elsif($config_page == 1)
    {
	GUI_add_contact;
    }
    elsif($config_page == 2)
    {
	print "add transport\n";
    }
    $add_win->hide;
}

sub on_config_delete_event {
    my $w = shift;
    $w->hide;
#    $jabber->{$jid}->{username} = $username_widget->get_text();
#    $jabber->{hostname} = $hostname_widget->get_text();
#    $jabber->{port} = $port_widget->get_text();
#    $jabber->{resource} = $resource_widget->get_text();
#    $jabber->{password} = $password_widget->get_text();
    1;#consume this event!
}

sub on_chat_delete {
    my ($widget, $event, $data) = @_;
    my ($jabber, $jid) = @{$data};
    delete $chat_wins{$jid};
    0;
}

sub open_chat {
    my ($jabber, $jid) = @_;

    my $chat = Gtk2::Window->new;
    $chat->signal_connect (delete_event => \&on_chat_delete, [$jabber, $jid]);
#$chat->signal_connect (destroy_event => \&on_chat_delete, [$jabber, $jid]);
    $chat->set_title ("$jid");
    $chat->set_size_request(300, 300);
    my $vbox = Gtk2::VBox->new;
    $chat->add($vbox);
    my $scroller = Gtk2::ScrolledWindow->new;
    $scroller->set_policy (qw(never automatic));

    $vbox->pack_start ($scroller, 1, 1, 0);
    my $recv = Gtk2::TextView->new;
    $recv->can_focus(0);
    $recv->set (editable => 0);
    $recv->set_cursor_visible (0);
    $recv->set (wrap_mode => "word");	
    $scroller->add ($recv);
    my $send = Gtk2::Entry->new;
    $send->set_activates_default(1);
    $send->signal_connect (key_release_event => \&on_chat_key, [$jabber, $jid]);
    $vbox->pack_start ($send, 0, 0, 0);
    $send->grab_focus();
    $chat->show_all;
    $chat_wins{$jid} = [$chat, $recv];
}

sub on_main_contacts_row_activated {
    my ($widget) = @_;
#FIXME: check if we are on a contact item
    my ($path) = $widget->get_cursor;

    my $iter = $main_contacts->get_iter ($path);
    my ($jid) = $main_contacts->get ($iter, 0);

    if(exists ($chat_wins{$jid}))
    {
	#put chat_wins on top;
    }
    else
    {
	$path->up;
	my $aiter = $main_contacts->get_iter ($path);
	my ($ajid) = $main_contacts->get ($aiter, 0);
	print "ajid: $ajid\n";
	open_chat($jabber->{$ajid}, $jid);
    }
#    return 1; # consume event
}

sub chat_add_text {
    my ($jabber, $jid, $text) = @_;

    open_chat($jabber, $jid) if(!exists $chat_wins{$jid});
    my $TV = $chat_wins{$jid}[1];
    my $buffer = $TV->get_buffer;
    my $iter = $buffer->get_end_iter;
    $buffer->insert($iter, $text . "\n");
    $iter = $buffer->get_end_iter;
    $TV->scroll_to_iter ($iter, 0, 0, 0, 0)
}

sub on_chat_key {
    my ($widget, $event, $data) = @_;
    my ($jabber, $jid) = @{$data};
    my $keypress = $event->keyval;    
    if ($keypress == $Gtk2::Gdk::Keysyms{KP_Enter} ||
        $keypress == $Gtk2::Gdk::Keysyms{Return}){
	my $body = $widget->get_text();
	if($body ne "")
	{
	    $widget->set_text("");
	    $jabber->send_chat($jid, $body);
	    chat_add_text($jabber, $jid, "mi : " . $body);
	}
	return 1; # consume keypress
    }
    if ($keypress == $Gtk2::Gdk::Keysyms{Escape}) {
	$chat_wins{$jid}[0]->destroy;
	delete $chat_wins{$jid};
	return 1; # consume keypress
    }
    return 0; # let gtk have the keypress
}

sub contact_name {
    my ($jabber, $jid) = @_;

    if($jabber->{roster}->{$jid}->{name} ne "") {
	return $jabber->{roster}->{$jid}->{name};
    } else {
	return $jid;
    }
}

sub on_chat {
    my ($jabber, $jid, $body) = @_;
    $jid =~ s!\/.*$!!; # remove any resource suffix from JID
    my $name = contact_name($jabber, $jid);
    chat_add_text($jabber, $jid, $name . ": " . $body);
}

sub on_presence {
    my ($jabber, $jid, $type, $status, $show) = @_;
    $jid =~ s!\/.*$!!; # remove any resource suffix from JID

    my $ajid = $jabber->{username} . "\@" . $jabber->{hostname};
    my $name = contact_name($jabber, $jid);

    print "===Presence: $jabber: $jid: $type: $status: $show\n";

    if($type eq ""){
	if($show eq ""){
	    print "$jid is Online: $status\n";
	}elsif($show eq "chat"){
	    print "$jid is chat: $status\n";
	}elsif($show eq "dnd"){
	    print "$jid is DND: $status\n";
	}elsif($show eq "xa"){
	    print "$jid is XA: $status\n";
	}elsif($show eq "away"){
	    print "$jid is away: $status\n";
	}
	GUI_main_contact_update($ajid, $jid, $name, $status);
    }elsif($type eq "unavailable"){
	    print "$jid is unavailable: $status\n";
	    GUI_main_contact_remove($ajid, $jid);
    }
}
